
#include <SPI.h>
#include <WiFi101.h>
#include <PubSubClient.h>
#include <DHT.h>
#include "CO2Sensor.h"
DHT dht(2,22);
 
#pragma GCC diagnostic ignored "-Wwrite-strings"

//-------------------------------------Sensor

CO2Sensor co2Sensor(A0, 0.99, 100);

// Local Network Settings
char ssid[] = "CNM_D";      // your network SSID (name)
char pass[] = "cnm1205!";   // your network password
int keyIndex = 0;                 // your network key Index number (needed only for WEP)

int status = WL_IDLE_STATUS;

WiFiServer server(80);
WiFiClient client = server.available();

// Variable Setup
long lastConnectionTime = 0; 
boolean lastConnected = false;
int failedCounter = 0;

PubSubClient * mqttClient;
char * MQTT_SERVER = "broker.mqtt-dashboard.com";
int MQTT_PORT = 1883;
char * CLIENT_ID = "portable_device";
boolean flagMqtt = false;
unsigned long mqttTry = 0;

long lastMsg = 0;
char msg[50];
int value = 0;
//void callback(char* topic, byte* payload, unsigned int length);

void setup()
{
  // Start Serial for debugging on the Serial Monitor
  Serial.begin(9600);
  co2Sensor.calibrate();
  dht.begin();

  // attempt to connect to Wifi network:
  while ( status != WL_CONNECTED) {
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(ssid);
    // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
    status = WiFi.begin(ssid, pass);
    // wait 10 seconds for connection:
    delay(10000);
  }
  server.begin();
  // you're connected now, so print out the status:
  //Start Wifi
  printWifiStatus();
  //mqttClient->setCallback(callback);
}
/*
 * subscribe
 */
void mqttCallback(char* topic, byte* payload, unsigned int length)
{
    char buffer[80];
    int len = length >= 79 ? 79 : length;
    memcpy(buffer, payload, len);
    buffer[length] = 0;
   
    Serial.print(">> Topic: ");
    Serial.print(topic);
    Serial.print(">> Payload: ");
    Serial.println(buffer);
}
void printWifiStatus() {
  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print your WiFi shield's IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);

  // print the received signal strength:
  long rssi = WiFi.RSSI();
  Serial.print("signal strength (RSSI):");
  Serial.print(rssi);
  Serial.println(" dBm");
}
/*
void mqttConnect()
{
  if (client.connect(MQTT_SERVER, MQTT_PORT) > 0){  
    Serial.println("\nconnected");
    lastConnectionTime = millis();
    if (client.connected())
    {
      Serial.println("Connecting to mqtt broker...\n");
      failedCounter = 0;
    }
    else {
      failedCounter++;
    }
  }
  else
  {
    failedCounter++;
    Serial.println("Connection to mqtt Failed ("+String(failedCounter, DEC)+")\n");   
    lastConnectionTime = millis(); 
  }
  
}*/

void loop()
{

  //---- Check Disconnect from ThingSpeak
  if (!client.connected() && lastConnected){
    Serial.println("...disconnected");
    client.stop();
  }
  //mqttConnect();
  if ( mqttClient == NULL ) {
        mqttClient = new PubSubClient(MQTT_SERVER, MQTT_PORT, mqttCallback, client);
        Serial.println("mqtt_Connecting Check..");
  }
  
  //---- Check if Arduino wifi needs to be restarted
  
  if (failedCounter > 3) printWifiStatus();
  
  lastConnected = client.connected();
  
     //listen for incoming clients
     //WiFiClient client = server.available();
     // Reading temperature or humidity takes about 250 milliseconds!
     // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
     int h = dht.readHumidity();
     // Read temperature as Celsius (the default)
     int t = dht.readTemperature();
     int val = co2Sensor.read();
 

      
         if ( flagMqtt == false )
         {
            if ( mqttTry == 0 || millis() - mqttTry >= 20000UL ) // 20sec
            {
                if ( mqttClient->connect(CLIENT_ID) )
                {
                    //flagMqtt = true;
                    Serial.println("\nConnected to MQTT broker!!!");
                   
                    // Publish
                    if (mqttClient->publish("CNM/ROTICS/TEST/Ajou", "Hi~~~")) {
                        Serial.println("Publish ok");
                       //  Serial.print("CO2 value: ");
                      //   Serial.println(val);
                     //   mqttClient->publish("CNM/ROTICS/TEST/Ajou", "Hi~~~");
                     //   mqttClient->publish("CO2_DOHYUN",val);
                        mqttClient->publish("Humidity_DOHYUN",h);
                        mqttClient->publish("Temperature_DOHYUN",t);
                    
                         //Serial.print("CO2 value: ");
                       //  Serial.println(val);
                          Serial.print("Humidity_DOHYUN: ");
                          Serial.print(h);
                          Serial.print(" %\t");
                          Serial.print("Temperature_DOHYUN: ");
                          Serial.print(t);
                          Serial.println(" *C ");
                    }
                    else {
                        Serial.println("Publish failed");
                    }
                   
                    if (mqttClient->subscribe("CNM/ROTICS/TEST/Ajou")) {
                        Serial.println("Subscribe ok");
                    //    mqttClient->subscribe("CNM/DEVICE/TEST/Ajou");
                       // mqttClient->subscribe("CO2",val);
                        mqttClient->subscribe("Humidity_DOHYUN",h);
                        mqttClient->subscribe("Temperature_DOHYUN",t);
                       // Serial.println("CO2 done ");
                        Serial.println("Humidity done ");
                        Serial.println("Temperature done");
                    }
                    else {
                        Serial.println("Subscribe failed");
                    }
                    
                }
                else {
                    Serial.println("MQTT connect failed");
                }
            }
            mqttClient->loop();
        }
        else {
           mqttClient->loop();
        }
/*        
      }
    }
    // give the web browser time to receive the data
    delay(1);

    // close the connection:
    client.stop();
    flagMqtt = false;
    mqttTry = 0;
    Serial.println("client disonnected");
  }
  else {
  
  Serial.println("no client");
      }
      */
}
/*
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();


}*/